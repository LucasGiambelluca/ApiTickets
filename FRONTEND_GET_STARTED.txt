=============================================
Gu√≠a para iniciar el Frontend de Ticketera
=============================================

Objetivo
- Crear un proyecto frontend independiente (por ejemplo, con React + Vite) que consuma la API de Ticketera.
- Implementar un flujo √°gil: explorar eventos y shows, unirse a la cola, reservar asientos, generar orden, pagar con MercadoPago y ver confirmaci√≥n.

1) Prerrequisitos
- Node.js >= 18 y npm >= 8
- Editor (VSCode recomendado)
- API Ticketera corriendo en: http://localhost:3000
- Claves de MercadoPago (usar las de prueba por ahora)

2) Crear el proyecto (React + Vite)
- Ejecutar:
  npm create vite@latest ticketera-frontend -- --template react
  cd ticketera-frontend
  npm install

3) Dependencias recomendadas
- Ruteo: react-router-dom
- HTTP: axios
- Estado: zustand (o Redux Toolkit)
- UI: TailwindCSS o MUI (elige una)
- Utilidades: date-fns, clsx
- Validaci√≥n: zod (opcional)
- Internacionalizaci√≥n: i18next (opcional)

Comandos:
  npm i react-router-dom axios zustand date-fns clsx
  (Opcional UI) Tailwind: https://tailwindcss.com/docs/guides/vite
  (Opcional UI) MUI: npm i @mui/material @emotion/react @emotion/styled

4) Variables de entorno (archivo .env)
- Crear en la ra√≠z del frontend un archivo .env con:
  VITE_API_BASE_URL=http://localhost:3000
  VITE_MERCADOPAGO_PUBLIC_KEY=TEST-xxxxxxxxxxxxxxxx

- En producci√≥n, apunta a tu dominio y aseg√∫rate de configurar CORS en el backend (ALLOWED_ORIGINS).

5) Estructura de carpetas sugerida
  src/
    api/
      client.ts (instancia axios base)
      events.ts
      shows.ts
      queue.ts
      orders.ts
      payments.ts
    pages/
      Home.tsx
      EventDetail.tsx
      ShowDetail.tsx
      Queue.tsx
      Checkout.tsx
      OrderSuccess.tsx
      NotFound.tsx
    components/
      EventCard.tsx
      ShowCard.tsx
      SeatGrid.tsx
      Loader.tsx
      ErrorState.tsx
      Navbar.tsx
    state/
      useCartStore.ts (o useOrderStore.ts)
      useQueueStore.ts
    hooks/
      useApi.ts
      useAsync.ts
    styles/
      globals.css
    router/
      index.tsx
    utils/
      format.ts
      constants.ts

6) Configurar cliente HTTP (axios)
- Base URL: import.meta.env.VITE_API_BASE_URL
- Timeouts, interceptores de error y de autenticaci√≥n si aplica.

7) Endpoints clave del backend (referencia)
- Eventos:
  GET    /api/events
  POST   /api/events
- Shows:
  GET    /api/shows/:id
  GET    /api/shows/:id/seats
  POST   /api/shows/:id/sections (admin)
- Cola virtual:
  POST   /api/queue/:showId/join
  GET    /api/queue/:showId/position?userId=...
  POST   /api/queue/:showId/process-next (admin)
- Holds/Reservas:
  POST   /api/shows/:id/holds  { userId, seats: [ids] }
  DELETE /api/shows/:id/holds/:holdId (opcional)
- √ìrdenes:
  POST   /api/orders { userId, showId, seats: [...] }
  GET    /api/orders/:orderId
- Pagos (MercadoPago):
  POST   /api/payments/preference { orderId }
  Webhook: /api/payments/webhook (lo maneja el backend)
- Health:
  GET    /health

8) Flujo UI recomendado
- Home: lista de eventos (GET /api/events)
- Detalle de evento ‚Üí lista de shows
- Detalle de show:
  - Si el show usa cola: bot√≥n ‚ÄúUnirse a la cola‚Äù (POST /api/queue/:showId/join)
  - Pantalla de cola: mostrar posici√≥n con polling (GET /api/queue/:showId/position)
  - Cuando est√© habilitado: mostrar asientos disponibles (GET /api/shows/:id/seats)
  - Selecci√≥n de asientos ‚Üí crear hold (POST /api/shows/:id/holds)
  - Crear orden (POST /api/orders)
  - Generar preferencia MP (POST /api/payments/preference)
  - Redirigir a checkout de MP (usar init_point retornado o Bricks)
  - Al volver (o v√≠a webhook + polling) ‚Üí pantalla de √©xito con resumen

9) Integraci√≥n de MercadoPago (Frontend)
- Front debe pedir al backend la preferencia:
  POST /api/payments/preference { orderId }
- Respuesta incluye init_point o preferenceId. Opciones:
  a) Redirigir a init_point (checkout pro/redirect)
  b) Usar MercadoPago Bricks (JS SDK) con public key (VITE_MERCADOPAGO_PUBLIC_KEY) y preferenceId.
- Documentaci√≥n MP Bricks: https://www.mercadopago.com.br/developers/es/docs/checkout-bricks/landing
- El webhook ya est√° en el backend; el front solo muestra estado y resultado.

10) Manejo de estado (ejemplo con Zustand)
- useQueueStore: { position, status, joinQueue(showId, userId), pollPosition() }
- useOrderStore: { items, total, holdId, setSeats(), createOrder(), paymentUrl }
- Persistencia m√≠nima en sessionStorage si es necesario.

11) UX/Robustez
- Loaders y estados vac√≠os en todas las pantallas.
- Manejo de errores HTTP (401, 404, 409, 422, 500) con mensajes claros.
- Reintentos exponenciales en polling de cola (3000 ‚Üí 5000ms).
- Deshabilitar botones durante requests idempotentes.
- Accesibilidad: roles, labels, focus management.
- Internacionalizaci√≥n (es/en) opcional.

12) Seguridad
- Nunca exponer tokens privados en el frontend.
- Usar la public key de MP en el front; el access token va en el backend.
- Configurar CORS en backend: ALLOWED_ORIGINS con la URL del frontend.

13) Scripts √∫tiles (frontend)
  npm run dev        # entorno desarrollo (Vite)
  npm run build      # build de producci√≥n
  npm run preview    # previsualizar build

14) Despliegue del frontend
- Hosting est√°tico: Netlify, Vercel, GitHub Pages, Cloudflare Pages.
- Variables de entorno en el hosting:
  VITE_API_BASE_URL=https://tu-api
  VITE_MERCADOPAGO_PUBLIC_KEY=PROD-xxxxxxxx
- Ajustar CORS en backend para el dominio del frontend.

15) Roadmap de pantallas
- Home (lista de eventos)
- EventDetail (shows del evento)
- ShowDetail (asientos + unirse a cola)
- Queue (posici√≥n y avance)
- Checkout (resumen ‚Üí pagar)
- OrderSuccess (confirmaci√≥n)
- Admin (opcional): crear evento, shows, secciones

16) Checklist de arranque r√°pido
[ ] Crear proyecto Vite React
[ ] Instalar dependencias (axios, router, zustand)
[ ] Crear .env con VITE_API_BASE_URL
[ ] Implementar client axios con baseURL
[ ] P√°ginas: Home, EventDetail, ShowDetail
[ ] Flujo de cola con polling
[ ] Flujo de hold + order
[ ] Integraci√≥n MP (preference desde backend)
[ ] Pantalla de √©xito y manejo de errores

17) Ejemplo de client axios (pseudo)
- Base: baseURL = import.meta.env.VITE_API_BASE_URL
- Interceptores: log de errores, headers comunes
- Reintento simple en 5xx (opcional)

18) Buenas pr√°cticas
- Componentes peque√±os y reutilizables
- Hooks para l√≥gica de datos (useEvents, useQueue)
- Tipar respuestas de API (TypeScript recomendado)
- Testear los flujos cr√≠ticos (cola, hold, pago)

19) Contacto backend desde front (resumen)
- GET /api/events ‚Üí lista eventos
- GET /api/shows/:id ‚Üí info show
- GET /api/shows/:id/seats ‚Üí asientos
- POST /api/queue/:showId/join ‚Üí unirse a cola
- GET /api/queue/:showId/position?userId=... ‚Üí posici√≥n
- POST /api/shows/:id/holds ‚Üí reservar asientos
- POST /api/orders ‚Üí crear orden
- POST /api/payments/preference ‚Üí preferencia MP
- GET /health ‚Üí monitoreo

20) Siguiente paso sugerido
- Crear el proyecto con Vite, preparar .env y levantar npm run dev.
- Implementar Home ‚Üí EventDetail ‚Üí ShowDetail con llamadas reales.
- Dejar placeholders para checkout mientras pruebas el flujo hasta generar preference.

Fin de la gu√≠a. ¬°√âxitos con el frontend! üöÄ
